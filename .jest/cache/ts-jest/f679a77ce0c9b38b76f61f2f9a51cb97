"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _react = require("react");var React = _interopRequireWildcard(_react);
var _nativeBase = require("native-base");
var _styles = require("./styles");var _styles2 = _interopRequireDefault(_styles);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}
class BlankPage extends React.Component {
    render() {
        const param = this.props.navigation.state.params;
        return React.createElement(_nativeBase.Container, { style: _styles2.default.container },
        React.createElement(_nativeBase.Header, null,
        React.createElement(_nativeBase.Left, null,
        React.createElement(_nativeBase.Button, { transparent: true, onPress: () => this.props.navigation.goBack() },
        React.createElement(_nativeBase.Icon, { name: "ios-arrow-back" }))),
        React.createElement(_nativeBase.Body, { style: { flex: 3 } },
        React.createElement(_nativeBase.Title, null, param ? param.name.item : "Blank Page")),
        React.createElement(_nativeBase.Right, null)),
        React.createElement(_nativeBase.Content, { padder: true },
        React.createElement(_nativeBase.Text, null, param !== undefined ? param.name.item : "Create Something Awesome . . .")));
    }}exports.default =

BlankPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjJFQUFBLEFBQU8sa0NBQUssQUFBSyxBQUFNLEFBQU8sQUFBQztBQUMvQixBQUFPLEFBQUUsQUFBUyxBQUFFLEFBQU0sQUFBRSxBQUFLLEFBQUUsQUFBTyxBQUFFLEFBQUksQUFBRSxBQUFNLEFBQUUsQUFBSSxBQUFFLEFBQUksQUFBRSxBQUFLLEFBQUUsQUFBSSxBQUFFLEFBQU0sQUFBYSxBQUFDO0FBRXZHLEFBQU8sQUFBTSxBQUFNLEFBQVUsQUFBQztBQUs5QixNQUFnQixrQkFBUSxBQUFLLE1BQUMsQUFBdUI7QUFDcEQsQUFBTTtBQUNMLGNBQU0sQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBVSxXQUFDLEFBQUssTUFBQyxBQUFNLEFBQUM7QUFDakQsQUFBTSxBQUFDLGVBQ04sTUFBQyxBQUFTLHVDQUFDLEFBQUssT0FBRSxBQUFNLGlCQUFDLEFBQVM7QUFDakMsY0FBQyxBQUFNO0FBQ04sY0FBQyxBQUFJO0FBQ0osY0FBQyxBQUFNLG9DQUFDLEFBQVcsbUJBQUMsQUFBTyxTQUFFLE1BQU0sQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFVLFdBQUMsQUFBTSxBQUFFO0FBQ2hFLGNBQUMsQUFBSSxrQ0FBQyxBQUFJLE1BQUMsQUFBZ0IsQUFBRyxBQUN0QixBQUNIO0FBRVAsY0FBQyxBQUFJLGtDQUFDLEFBQUssT0FBRSxFQUFFLEFBQUksTUFBRSxBQUFDLEFBQUU7QUFDdkIsY0FBQyxBQUFLLHVDQUFFLEFBQUssUUFBRyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksT0FBRyxBQUFZLEFBQVMsQUFDakQ7QUFFUCxjQUFDLEFBQUssaUNBQUcsQUFDRDtBQUVULGNBQUMsQUFBTyxxQ0FBQyxBQUFNO0FBQ2QsY0FBQyxBQUFJLHNDQUFFLEFBQUssVUFBSyxBQUFTLFlBQUcsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFJLE9BQUcsQUFBZ0MsQUFBUSxBQUM5RSxBQUNDLEFBQ1osQUFBQyxBQUNIO0FBQUMsQUFDRCxBQUVEOztBQUFlLEFBQVMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29udGFpbmVyLCBIZWFkZXIsIFRpdGxlLCBDb250ZW50LCBUZXh0LCBCdXR0b24sIEljb24sIExlZnQsIFJpZ2h0LCBCb2R5IH0gZnJvbSBcIm5hdGl2ZS1iYXNlXCI7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVzXCI7XG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcblx0bmF2aWdhdGlvbjogYW55O1xufVxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7fVxuY2xhc3MgQmxhbmtQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgcGFyYW0gPSB0aGlzLnByb3BzLm5hdmlnYXRpb24uc3RhdGUucGFyYW1zO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8Q29udGFpbmVyIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cblx0XHRcdFx0PEhlYWRlcj5cblx0XHRcdFx0XHQ8TGVmdD5cblx0XHRcdFx0XHRcdDxCdXR0b24gdHJhbnNwYXJlbnQgb25QcmVzcz17KCkgPT4gdGhpcy5wcm9wcy5uYXZpZ2F0aW9uLmdvQmFjaygpfT5cblx0XHRcdFx0XHRcdFx0PEljb24gbmFtZT1cImlvcy1hcnJvdy1iYWNrXCIgLz5cblx0XHRcdFx0XHRcdDwvQnV0dG9uPlxuXHRcdFx0XHRcdDwvTGVmdD5cblxuXHRcdFx0XHRcdDxCb2R5IHN0eWxlPXt7IGZsZXg6IDMgfX0+XG5cdFx0XHRcdFx0XHQ8VGl0bGU+e3BhcmFtID8gcGFyYW0ubmFtZS5pdGVtIDogXCJCbGFuayBQYWdlXCJ9PC9UaXRsZT5cblx0XHRcdFx0XHQ8L0JvZHk+XG5cblx0XHRcdFx0XHQ8UmlnaHQgLz5cblx0XHRcdFx0PC9IZWFkZXI+XG5cblx0XHRcdFx0PENvbnRlbnQgcGFkZGVyPlxuXHRcdFx0XHRcdDxUZXh0PntwYXJhbSAhPT0gdW5kZWZpbmVkID8gcGFyYW0ubmFtZS5pdGVtIDogXCJDcmVhdGUgU29tZXRoaW5nIEF3ZXNvbWUgLiAuIC5cIn08L1RleHQ+XG5cdFx0XHRcdDwvQ29udGVudD5cblx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxhbmtQYWdlO1xuIl19